<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLibrary</name>
    </assembly>
    <members>
        <member name="T:MyLibrary.Extensions.CharExtensions">
            <summary>
                Extension methods for <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.CharExtensions.ToHex(System.Char)">
            <summary>
                Converts the Unicode value of this character to its equivalent 4-character hexadecimal string representation.
            </summary>
            <param name="ch">A character to convert to a hexadecimal string.</param>
            <returns>The equivalent 4-character hexadecimal string representation.</returns>
        </member>
        <member name="T:MyLibrary.Extensions.ComparisonExtensions">
            <summary>
                Extension methods for comparisons
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.ComparisonExtensions.IsIn``1(``0,``0[])">
            <summary>
                Determines if an object can be found inside a generic list
                Replaces: if (someString == "string1" || someString == "string2" || someString == "string3")
            </summary>
            <example>if(someString.IsIn("string1", "string2", "string3"))</example>
            <typeparam name="T">Generic</typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.ComparisonExtensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines if an object can be found inside a generic list
                Replaces: if (someString == "string1" || someString == "string2" || someString == "string3")
            </summary>
            <example>
                var inclusionList = new List&lt;string&gt; { "inclusion1", "inclusion2" };
                var query = myEntities.MyEntity
                .Select(e => e.Name)
                .Where(e => e.IsIn(inclusionList));
            </example>
            <typeparam name="T">Generic</typeparam>
            <param name="source">Generic being </param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Extensions.ConversionExtensions">
            <summary>
                Extension methods for conversions
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.ConversionExtensions.ConvertTo``1(System.IConvertible)">
            <summary>
                Converts one type to another
            </summary>
            <example>
                var age = "28";
                var intAge = age.To&lt;int&gt;();
                var doubleAge = intAge.To&lt;double&gt;();
                var decimalAge = doubleAge.To&lt;decimal&gt;();
            </example>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="value">Item to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.ConversionExtensions.ConvertTo``1(System.IConvertible,``0)">
            <summary>
                Converts one type to another
            </summary>
            <example>
                var age = "28";
                var intAge = age.To&lt;int&gt;(-1);
                var doubleAge = intAge.To&lt;double&gt;(-1);
                var decimalAge = doubleAge.To&lt;decimal&gt;(-1);
            </example>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="value">Item to convert</param>
            <param name="ifError">Value to return if there is an error</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.ConversionExtensions.HashBy``1(System.Byte[])">
            <summary>
                Implicit hashing
            </summary>
            <typeparam name="T">
                <see cref="T:System.Security.Cryptography.HashAlgorithm" />
            </typeparam>
            <param name="x">Byte array</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="T:MyLibrary.Extensions.DataReaderExtensions">
            <summary>
                Extension methods for <see cref="T:System.Data.IDataReader"/>
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.DataReaderExtensions.Get``1(System.Data.IDataReader,System.String)">
            <summary>
            Gets the value of a column from a <see cref="T:System.Data.IDataReader"/>
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="rd"><see cref="T:System.Data.IDataReader"/></param>
            <param name="column">Column Name</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.DataReaderExtensions.Get``1(System.Data.IDataReader,System.String,``0)">
            <summary>
                Gets the value of a column in a DataReader, returning a default value if null, then converts it to T.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="rd">IDataReader</param>
            <param name="column">Column Name</param>
            <param name="defaultValue">Value to return if NULL</param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Extensions.DateTimeExtensions">
            <summary>
                Extension methods for <see cref="T:System.DateTime" />
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
                Determines whether the date falls on Monday-Friday
            </summary>
            <param name="source"><see cref="T:System.DateTime" /> to check</param>
            <returns>true/false</returns>
        </member>
        <member name="M:MyLibrary.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
                Determines whether the date falls on a weekend
            </summary>
            <param name="source"><see cref="T:System.DateTime" /> to check</param>
            <returns>true/false</returns>
        </member>
        <member name="M:MyLibrary.Extensions.DateTimeExtensions.IsHoliday(System.DateTime)">
            <summary>
                Determines whether the date falls on a national holiday.
            </summary>
            <param name="source"><see cref="T:System.DateTime" /> to check</param>
            <returns>true/false</returns>
        </member>
        <member name="M:MyLibrary.Extensions.DateTimeExtensions.FirstMondayOfYear(System.Int32)">
            <summary>
                Returns a <see cref="T:System.DateTime" /> object for the first Monday of the year
            </summary>
            <example>DateTime mnd = DateExtensions.FirstMondayOfYear(2017);</example>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.DateTimeExtensions.RangeUntil(System.DateTime,System.DateTime)">
            <summary>
                Provides a range of dates from the source date to a defined date.
            </summary>
            <param name="from"><see cref="T:System.DateTime" /> that begins the range</param>
            <param name="to"><see cref="T:System.DateTime" /> that ends the range</param>
            <returns>Enumerable list of <see cref="T:System.DateTime" /></returns>
        </member>
        <member name="M:MyLibrary.Extensions.DateTimeExtensions.IsDate``1(``0)">
            <summary>
                Returns whether the object represents a valid date
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="source">Object</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.DateTimeExtensions.Average(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
                Returns an average of a list of <see cref="T:System.TimeSpan" /> items.
            </summary>
            <example>TimeSpan average = timeSpans.Average();</example>
            <param name="sourceTimeSpans">Enumerable list of <see cref="T:System.TimeSpan" /></param>
            <returns>
                <see cref="T:System.TimeSpan" />
            </returns>
        </member>
        <member name="M:MyLibrary.Extensions.DateTimeExtensions.Sum(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
                Calculates the sum of the given timeSpans.
            </summary>
            <param name="sources">Enumerable list of <see cref="T:System.TimeSpan" /></param>
            <returns>
                <see cref="T:System.TimeSpan" />
            </returns>
        </member>
        <member name="T:MyLibrary.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for Dictionaries and Arrays.
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.DictionaryExtensions.MaxKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Returns the key of the highest value in a dictionary.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">Value type, must implement IComparable&lt;Value&gt;</typeparam>
            <param name="dictionary">The dictionary</param>
            <returns>The key of the highest value in the dictionary.</returns>
        </member>
        <member name="M:MyLibrary.Extensions.DictionaryExtensions.MaxValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Returns the maximum value in the dictionary.
            </summary>
            <param name="dictionary">The dictionary</param>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.DictionaryExtensions.CopyTo``1(``0[],``0[])">
            <summary>
            Same as the <see cref="M:MyLibrary.Extensions.DictionaryExtensions.CopyTo``1(``0[],``0[])"/> method but defaults to start at index 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="T:MyLibrary.Extensions.EnumerableExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.EnumerableExtensions.Safe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty enumerable if null, otherwise returns the enumerable.
            <example>
            <code>var something = Model.SomeNullEnumerable;
            IEnumerable&lt;int&gt; source = something.Safe();
            </code></example>
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns whether the <see cref="T:System.Collections.Generic.IEnumerable`1" /> is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns whether the enumerable has any elements that match the LINQ qualifier.
            </summary>
            <example>intList.Contains(i =&gt; i == 2); // false</example>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.EnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Returns a string that represents a concatenated list of enumerables.
            </summary>
            <example>new[]{"a", "b", "d", "z"}.ToString(",") => "a,b,d,z"</example>
            <typeparam name="T">Generic type</typeparam>
            <param name="source">Enumerable to concatenate</param>
            <param name="delimiter">Delimiter as a <see cref="T:System.String" /> between values</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                Appends multiple elements to the given sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to append additional elements to.</param>
            <param name="elements">The additional elements to append.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the additional elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="elements" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MyLibrary.Extensions.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
                Concatenates multiple sequences.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to concatenate additional sequences to.</param>
            <param name="subsequent">The additional <see cref="T:System.Collections.Generic.IEnumerable`1" /> objects whose elements to append.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements of all sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first" /> or <paramref name="subsequent" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MyLibrary.Extensions.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Takes any IEnumerable and returns a HashSet
            </summary>
            <param name="source">Ienumerable</param>
            <typeparam name="T">Generic Class</typeparam>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Extensions.EnumExtensions">
            <summary>
                Extension methods for <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="T:MyLibrary.Extensions.JsonExtensions">
            <summary>
            Extension methods for JSON objects
            </summary>
        </member>
        <member name="T:MyLibrary.Extensions.NumberExtensions">
            <summary>
                Extension methods for numbers
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.NumberExtensions.Mode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the object(s) that appear the most number of times in the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.NumberExtensions.IsPrime(System.Int32)">
            <summary>
            Returns whether the integer is a prime number.
            </summary>
            <param name="input">Integer to check against</param>
            <returns>True/False</returns>
        </member>
        <member name="T:MyLibrary.Extensions.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Returns whether the string is completely empty, including white spaces.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.InitialLetterToUpper(System.String)">
            <summary>
            Returns the string with the first letter in upper case.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.InitialLetterToLower(System.String)">
            <summary>
            Returns the string with the first letter in lower case.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.ProperCapitalization(System.String)">
            <summary>
            Returns the string with the first letter in either upper or lower case depending on the word before it.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.Encrypt(System.String,System.Net.Security.EncryptionPolicy)">
            <summary>
            Encrypts the string based on the provided <see cref="T:System.Net.Security.EncryptionPolicy"/>
            </summary>
            <param name="source"></param>
            <param name="encryptionPolicy"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.RemoveLastCharacter(System.String)">
            <summary>
            Removes the last character from the string.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.RemoveLastCharacters(System.String,System.Int32)">
            <summary>
            Removes a number of characters from the end of the string.
            </summary>
            <param name="source"></param>
            <param name="numberOfChars"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.RemoveFirstCharacter(System.String)">
            <summary>
            Removes the last character from the string.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.RemoveFirstCharacters(System.String,System.Int32)">
            <summary>
            Removes a number of characters from the end of the string.
            </summary>
            <param name="source"></param>
            <param name="numberOfChars"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.RemoveSubstring(System.String,System.String)">
            <summary>
            Removes a substring from a string.
            </summary>
            <param name="source"></param>
            <param name="substring"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses the string.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.ToSafeString(System.Char[])">
            <summary>
             Converts an array of characters to a safe string.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.SplitPascalCase(System.String)">
            <summary>
            Splits the string by pascal case.		
            </summary>
            <example>
            The following returns "This Is A Pascal Case String"
            <code>
            var str = "ThisIsAPascalCaseString";
            return str.SplitPascalCase();
            </code>
            </example>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.SplitUnderlines(System.String)">
            <summary>
            Splits the string by underlines.		
            </summary>
            <example>
            The following returns "This_Is_An_Underlined_String"
            <code>
            var str = "This_Is_An_Underlined_String";
            return str.SplitUnderlines();
            </code>
            </example>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a single string.
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.OnlyDigits(System.String)">
            <summary>
            Returns only the digits inside of a string
            </summary>
            <param name="source">Source string</param>
            <returns>All digits in the string</returns>
        </member>
        <member name="M:MyLibrary.Extensions.StringExtensions.IsBlank(System.String)">
            <summary>
            Returns whether the string is blank (white space characters ignored because then it wouldn't be 'blank')
            </summary>
            <example>" ".IsBlank() => false;
            "".IsBlank() => true;</example>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Formatters.DateTimeFormatting">
            <summary>
            DateTime formatters
            </summary>
        </member>
        <member name="T:MyLibrary.Formatters.StringFormatting">
            <summary>
            String formatters
            </summary>
        </member>
        <member name="T:MyLibrary.Helpers.AddressHelper">
            <summary>
                Methods to extend and format Addresses
            </summary>
        </member>
        <member name="M:MyLibrary.Helpers.AddressHelper.Format(MyLibrary.Models.Address)">
            <summary>
                Formats an address into a string
            </summary>
            <param name="source"><see cref="T:MyLibrary.Models.Address" /> to be formatted</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Helpers.AddressHelper.IsValidZip(System.String,MyLibrary.Models.Country)">
            <summary>
                Determines whether the postal/zip code is valid.
            </summary>
            <param name="source">Postal/Zip code</param>
            <param name="country">Country of origin</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Helpers.AddressHelper.GetStates(MyLibrary.Models.Country)">
            <summary>
                Returns a list of <see cref="T:MyLibrary.Models.State" /> for a given country.
            </summary>
            <param name="country">The <see cref="T:MyLibrary.Models.Country" /> to get the states from.</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Helpers.AddressHelper.GetCountries(MyLibrary.Models.Region)">
            <summary>
                Returns a list of countries in a given region.
            </summary>
            <param name="region">The enum of the region represented as an integer</param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Helpers.EnumHelper`1">
            <summary>
            Helper methods for <see cref="T:System.Enum"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyLibrary.Helpers.EnumHelper`1.SearchDescriptions(System.String)">
            <summary>
            Retrieves the description listed in an enum's attribute
            </summary>
            <example>EnumHelper&lt;SomeEnumName&gt;.GetDescription("</example>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Models.Address">
            <summary>
            Class to hold information about addresses
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Address.AddressLine1">
            <summary>
            Address line one
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Address.AddressLine2">
            <summary>
            Address line two
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Address.AddressLine3">
            <summary>
            Address line three
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Address.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Address.State">
            <summary>
            State
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Address.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Address.PostalCode">
            <summary>
            Postal/Zip code
            </summary>
        </member>
        <member name="T:MyLibrary.Models.Country">
            <summary>
                Class to hold information about countries
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Country.Name">
            <summary>
                ISO standard country name
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Country.Code">
            <summary>
                ISO standard country code
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Country.Region">
            <summary>
                Region the country belongs to
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Country.Currencies">
            <summary>
                Country's official currencies
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Country.Languages">
            <summary>
                Country's official languages
            </summary>
        </member>
        <member name="T:MyLibrary.Models.Region">
            <summary>
            Class to hold information about regions
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Region.Name">
            <summary>
            ISO standard region name
            </summary>
        </member>
        <member name="P:MyLibrary.Models.Region.Code">
            <summary>
            ISO standard region code
            </summary>
        </member>
        <member name="T:MyLibrary.Models.State">
            <summary>
            Class to hold information about states
            </summary>
        </member>
        <member name="P:MyLibrary.Models.State.Name">
            <summary>
            ISO standard state name
            </summary>
        </member>
        <member name="P:MyLibrary.Models.State.Code">
            <summary>
            ISO standard state code
            </summary>
        </member>
        <member name="P:MyLibrary.Models.State.Country">
            <summary>
            Country the state belongs to
            </summary>
        </member>
    </members>
</doc>
