<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLibrary</name>
    </assembly>
    <members>
        <member name="T:MyLibrary.Core.Extensions.BufferExtensions">
            <summary>
            Extension methods for Buffers
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.BufferExtensions.AsString(System.Byte[])">
            <summary>
                Converts a byte array to a string, using its byte order mark to convert it to the right encoding.
                http://www.shrinkrays.net/code-snippets/csharp/an-extension-method-for-converting-a-byte-array-to-a-string.aspx
            https://weblog.west-wind.com/posts/2007/Nov/28/Detecting-Text-Encoding-for-StreamReader
            http://www.anotherchris.net/csharp/an-extension-method-for-converting-a-byte-array-to-a-string-reading-its-bom/
            </summary>
            <param name="source">An array of bytes to convert</param>
            <returns>The byte as a string.</returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.CharExtensions">
            <summary>
                Extension methods for <see cref="T:System.Char" />
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.RemoveChars(System.Char[],System.Boolean,System.Char[])">
            <summary>
                Returns a collection of characters where the second array's characters are subtracted from the first.
            </summary>
            <param name="source">Source string</param>
            <param name="paramChars">Array of characters to remove from string.</param>
            <param name="excludeWhitespace">T/F whether to include whitespace characters in the result.</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.ReplaceUnicode(System.Char)">
            <summary>
                Replaces the character diacritic with its romanized counterpart string
            </summary>
            <param name="source">Source character</param>
            <returns>Character represented in its romanized form</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.ToHex(System.Char)">
            <summary>
                Converts the Unicode value of this character to its equivalent 4-character hexadecimal string representation
            </summary>
            <param name="ch">A character to convert to a hexadecimal string</param>
            <returns>The equivalent 4-character hexadecimal string representation</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.ToLower(System.Char)">
            <summary>
                Converts a character to lowercase
            </summary>
            <param name="c">Character to convert</param>
            <returns>Character in lowercase</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.ToLowerInvariant(System.Char)">
            <summary>
                Converts a character to lowercase, without a specific culture
            </summary>
            <param name="c">Character to convert</param>
            <returns>Character in lowercase</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.ToSafeString(System.Char[])">
            <summary>
                Converts an array of characters to a null-safe string
            </summary>
            <param name="source">Array of characters to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.ToStringInvariant(System.Char)">
            <summary>
                Converts a char to a string with an invariant culture format
            </summary>
            <param name="c">Character to convert</param>
            <returns>Character as a string with an invariant culture</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.ToUpper(System.Char)">
            <summary>
                Converts a character to uppercase
            </summary>
            <param name="c">Character to convert</param>
            <returns>Character in uppercase</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.CharExtensions.ToUpperInvariant(System.Char)">
            <summary>
                Converts a character to uppercase, without a specific culture
            </summary>
            <param name="c">Character to convert</param>
            <returns>Character in uppercase</returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.ComparisonExtensions">
            <summary>
                Extension methods for comparisons
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ComparisonExtensions.IsIn``1(``0,``0[])">
            <summary>
                Determines if an object can be found inside a generic list
                Replaces: if (someString == "string1" || someString == "string2" || someString == "string3")
            </summary>
            <example>if(someString.IsIn("string1", "string2", "string3"))</example>
            <typeparam name="T">Generic</typeparam>
            <param name="source"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ComparisonExtensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines if an object can be found inside a generic list
                Replaces: if (someString == "string1" || someString == "string2" || someString == "string3")
            </summary>
            <example>
                var inclusionList = new List&lt;string&gt; { "inclusion1", "inclusion2" };
                var query = myEntities.MyEntity
                .Select(e => e.Name)
                .Where(e => e.IsIn(inclusionList));
            </example>
            <typeparam name="T">Generic</typeparam>
            <param name="source">Generic being </param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.ConversionExtensions">
            <summary>
                Extension methods for conversions
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ConversionExtensions.ConvertTo``1(System.IConvertible)">
            <summary>
                Converts one type to another
            </summary>
            <example>
                var age = "28";
                var intAge = age.ConvertTo&lt;int&gt;(); => 28
                var doubleAge = intAge.ConvertTo&lt;double&gt;(); => 28.0
                var dateTimeAge = doubleAge.ConvertTo&lt;DateTime&gt;(); => 1/1/0001 12:00:00AM
            </example>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="value">Item to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ConversionExtensions.ConvertTo``1(System.IConvertible,``0)">
            <summary>
                Converts one type to another
            </summary>
            <example>
                var age = "28";
                var intAge = age.ConvertTo&lt;int&gt;(-1); => 28
                var doubleAge = intAge.ConvertTo&lt;double&gt;(-1); => 28.0
                var dateTimeAge = doubleAge.ConvertTo&lt;DateTime&gt;(DateTime.Today); => {Today's Date}
            </example>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="value">Item to convert</param>
            <param name="ifError">Value to return if there is an error</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ConversionExtensions.GetSafe``1(System.IConvertible)">
            <summary>
                Another way to call ConvertTo{T}
            </summary>
            <typeparam name="T">Type to convert to</typeparam>
            <param name="source">Source to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ConversionExtensions.HashBy``1(System.Byte[])">
            <summary>
                Implicit hashing
            </summary>
            <typeparam name="T">
                <see cref="T:System.Security.Cryptography.HashAlgorithm" />
            </typeparam>
            <param name="x">Byte array</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.DataReaderExtensions">
            <summary>
                Extension methods for <see cref="T:System.Data.IDataReader"/>
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DataReaderExtensions.Get``1(System.Data.IDataReader,System.String)">
            <summary>
            Gets the value of a column from a <see cref="T:System.Data.IDataReader"/>
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="rd"><see cref="T:System.Data.IDataReader"/></param>
            <param name="column">Column Name</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DataReaderExtensions.Get``1(System.Data.IDataReader,System.String,``0)">
            <summary>
                Gets the value of a column in a DataReader, returning a default value if null, then converts it to T.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="rd">IDataReader</param>
            <param name="column">Column Name</param>
            <param name="defaultValue">Value to return if NULL</param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.DateTimeExtensions">
            <summary>
                Extension methods for <see cref="T:System.DateTime" />
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
                Returns the last minute of the day (23:59:59)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
                Determines whether the date falls on Monday-Friday
            </summary>
            <param name="source"><see cref="T:System.DateTime" /> to check</param>
            <returns>true/false</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
                Determines whether the date falls on a weekend
            </summary>
            <param name="source"><see cref="T:System.DateTime" /> to check</param>
            <returns>true/false</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DateTimeExtensions.IsHoliday(System.DateTime)">
            <summary>
                Determines whether the date falls on a national holiday.
            </summary>
            <param name="source"><see cref="T:System.DateTime" /> to check</param>
            <returns>true/false</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DateTimeExtensions.RangeUntil(System.DateTime,System.DateTime)">
            <summary>
                Provides a range of dates from the source date to a defined date.
            </summary>
            <param name="from"><see cref="T:System.DateTime" /> that begins the range</param>
            <param name="to"><see cref="T:System.DateTime" /> that ends the range</param>
            <returns>Enumerable list of <see cref="T:System.DateTime" /></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DateTimeExtensions.IsDate``1(``0)">
            <summary>
                Returns whether the object represents a valid date
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="source">Object</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DateTimeExtensions.Average(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
                Returns an average of a list of <see cref="T:System.TimeSpan" /> items.
            </summary>
            <example>TimeSpan average = timeSpans.Average();</example>
            <param name="sourceTimeSpans">Enumerable list of <see cref="T:System.TimeSpan" /></param>
            <returns>
                <see cref="T:System.TimeSpan" />
            </returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DateTimeExtensions.Sum(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
                Calculates the sum of the given timeSpans.
            </summary>
            <param name="sources">Enumerable list of <see cref="T:System.TimeSpan" /></param>
            <returns>
                <see cref="T:System.TimeSpan" />
            </returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for Dictionaries and Arrays.
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DictionaryExtensions.MaxKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Returns the key of the highest value in a dictionary.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">Value type, must implement IComparable&lt;Value&gt;</typeparam>
            <param name="dictionary">The dictionary</param>
            <returns>The key of the highest value in the dictionary.</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DictionaryExtensions.MaxValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Returns the maximum value in the dictionary.
            </summary>
            <param name="dictionary">The dictionary</param>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.DictionaryExtensions.CopyTo``1(``0[],``0[])">
            <summary>
            Same as the <see cref="M:MyLibrary.Core.Extensions.DictionaryExtensions.CopyTo``1(``0[],``0[])"/> method but defaults to start at index 0.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="T:MyLibrary.Core.Extensions.EnumerableExtensions">
            <summary>
                Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                Appends multiple elements to the given sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to append additional elements to.</param>
            <param name="elements">The additional elements to append.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the additional elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source" /> or <paramref name="elements" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
                Concatenates multiple sequences.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to concatenate additional sequences to.</param>
            <param name="subsequent">The additional <see cref="T:System.Collections.Generic.IEnumerable`1" /> objects whose elements to append.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements of all sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first" /> or <paramref name="subsequent" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns whether the sequence has any elements that match the LINQ qualifier.
            </summary>
            <example>intList.Contains(i =&gt; i == 2); // false</example>
            <typeparam name="TSource">Object type</typeparam>
            <param name="source">Source Enumerable</param>
            <param name="predicate">LINQ statement to search for</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Returns whether the sequence has any elements that match the object.
            </summary>
            <example>intList.Contains("something"); // false</example>
            <typeparam name="TSource">Object type</typeparam>
            <param name="source">Source Enumerable</param>
            <param name="predicate">Object to search for</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Selects distinct items from a sequence by using a comparison delegate.
            </summary>
            <typeparam name="T">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The comparison expression.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">The comparison key selector.</param>
            <param name="comparer">A optional comparer to compare the key items.</param>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.GetRandomItem``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <summary>
                Pics a random element from <paramref name="source" />. If the enumerable is null or empty, default(T) is returned.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="source" /></typeparam>
            <param name="source">The source sequence.</param>
            <param name="seed">Optional random seed</param>
            <returns>A random <typeparamref name="T" /> from <paramref name="source" />, or default(T) if source is null or empty</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.GetSafeVersion``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an empty enumerable if null, otherwise returns the enumerable.
                <example>
                    <code>var something = Model.SomeNullEnumerable;
            IEnumerable&lt;int&gt; source = something.GetSafeVersion();
            </code>
                </example>
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.Has``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                [Obsolete] Returns whether the enumerable has any elements that match the object.
            </summary>
            <example>intList.Contains("something"); // false</example>
            <typeparam name="TSource">Object type</typeparam>
            <param name="source">Source Enumerable</param>
            <param name="predicate">Object to search for</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.Has``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Returns whether the enumerable has any elements that match the LINQ qualifier.
            </summary>
            <example>intList.Contains(i =&gt; i == 2); // false</example>
            <typeparam name="TSource">Object type</typeparam>
            <param name="source">Source Enumerable</param>
            <param name="predicate">LINQ statement to search for</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                <para>
                    Returns whether the <see cref="T:System.Collections.Generic.IEnumerable`1" /> is empty
                </para>
                <para>
                    Will throw an error if {T} is null.
                </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns whether the IEnumerable{TSource} is null or empty
            </summary>
            <typeparam name="T">Source Type</typeparam>
            <param name="source">IEnumerable to be compared against</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Joins an <see cref="T:System.Collections.Generic.IEnumerable`1" /> into a single string.
            </summary>
            <param name="source"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.RemoveNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes null values from the collection
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="source">Source Enumerable</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Takes any IEnumerable and returns a HashSet
            </summary>
            <param name="source">Source Enumerable</param>
            <typeparam name="T">Object type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Returns a string that represents a concatenated list of enumerables
            </summary>
            <example>new[]{"a", "b", "d", "z"}.ToString(",") => "a,b,d,z"</example>
            <typeparam name="T"></typeparam>
            <param name="source">Enumerable to concatenate</param>
            <param name="delimiter">Delimiter as a <see cref="T:System.String" /> between values</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.TrimEachElement(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Returns the same enumerable, with all its elements trimmed
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.WhereIn``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Finds all items in <paramref name="values" /> that are found within the Enumerable <paramref name="source" />
                using a LINQ delegate
            </summary>
            <typeparam name="T">Type of item to search or search for</typeparam>
            <param name="source">Source Enumerable to search in</param>
            <param name="predicate">An delegate used to compare the items</param>
            <param name="values">Enumerable of values to check</param>
            <returns>The items of <paramref name="values" /> that exist in <paramref name="source" /></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.WhereIn``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Finds all items in <paramref name="values" /> that are found within the Enumerable <paramref name="source" />
            </summary>
            <typeparam name="T">Type of item to search</typeparam>
            <param name="source">Source Enumerable to search in</param>
            <param name="values">Enumerable of values to check</param>
            <returns>The items of <paramref name="values" /> that exist in <paramref name="source" /></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.WhereNotIn``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Finds all items in <paramref name="values" /> that are not found within the Enumerable <paramref name="source" />
                using a LINQ delegate
            </summary>
            <typeparam name="T">Type of item to search or search for</typeparam>
            <param name="source">Source Enumerable to search in</param>
            <param name="predicate">An delegate used to compare the items</param>
            <param name="values">Enumerable of values to check</param>
            <returns>The items of <paramref name="values" /> that do not exist in <paramref name="source" /></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumerableExtensions.WhereNotIn``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Finds all items in <paramref name="values" /> that are not found within the Enumerable <paramref name="source" />
            </summary>
            <typeparam name="T">Type of item to search</typeparam>
            <param name="source">Source Enumerable to search in</param>
            <param name="values">Enumerable of values to check</param>
            <returns>The items of <paramref name="values" /> that do not exist in <paramref name="source" /></returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.EnumExtensions">
            <summary>
                Extension methods for <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.EnumExtensions.GetDisplayName``1(``0)">
            <summary>
            Returns the Enum's Display Name as found in the Display(Name=xxx) Attribute or the Enum's value name if no attribute is found
            </summary>
            <typeparam name="TEnum">Enum Type</typeparam>
            <param name="value">Enum Value</param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.JsonExtensions">
            <summary>
                Extension methods for JSON objects
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.JsonExtensions.FromJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                Deserializes a JSON string (with optional settings) into a desired object type.
            </summary>
            <param name="source">JSON string</param>
            <param name="settings">Optional serializer settings</param>
            <typeparam name="T">Resulting object type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.JsonExtensions.ToJson(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
                Converts any object into a JSON-formatted string
            </summary>
            <param name="source">Object to be converted</param>
            <param name="formatting">Optional <see cref="T:Newtonsoft.Json.Formatting" /></param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.NumberExtensions">
            <summary>
                Extension methods for numbers
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
                Checks if the value is in given range
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.IsInRange(System.Double,System.Double,System.Double)">
            <summary>
                Checks if the value is in given range
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.IsInRange(System.Single,System.Single,System.Single)">
            <summary>
                Checks if the value is in given range
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.IsInRange(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
                Checks if the value is in given range
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.IsPrime(System.UInt32)">
            <summary>
                Returns whether the integer is a prime number.
            </summary>
            <param name="input">Integer to check against</param>
            <returns>True/False</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.Mode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns the object(s) that appear the most number of times in the <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseDoubleOrDefault(System.String)">
            <summary>
                Converts a string to a double
            </summary>
            <param name="source">String to convert</param>
            <returns>String as a double or an double type's default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseDoubleOrDefault(System.String,System.Double)">
            <summary>
                Converts a string to a double
            </summary>
            <param name="source">String to convert</param>
            <param name="defaultValue">Default value to return if the string fails to convert</param>
            <returns>String as a double or the default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseFloatOrDefault(System.String)">
            <summary>
                Converts a string to a float
            </summary>
            <param name="source">String to convert</param>
            <returns>String as a float or an float type's default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseFloatOrDefault(System.String,System.Single)">
            <summary>
                Converts a string to a float
            </summary>
            <param name="source">String to convert</param>
            <param name="defaultValue">Default value to return if the string fails to convert</param>
            <returns>String as a float or the default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseIntOrDefault(System.String)">
            <summary>
                Converts a string to an integer
            </summary>
            <param name="source">String to convert</param>
            <returns>String as an integer or an integer type's default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseIntOrDefault(System.String,System.Int32)">
            <summary>
                Converts a string to an integer
            </summary>
            <param name="source">String to convert</param>
            <param name="defaultValue">Default value to return if the string fails to convert</param>
            <returns>String as an integer or the default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseLongOrDefault(System.String)">
            <summary>
                Converts a string to a long
            </summary>
            <param name="source">String to convert</param>
            <returns>String as a long or an long type's default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseLongOrDefault(System.String,System.Int64)">
            <summary>
                Converts a string to a long
            </summary>
            <param name="source">String to convert</param>
            <param name="defaultValue">Default value to return if the string fails to convert</param>
            <returns>String as a long or the default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseDecimalOrDefault(System.String)">
            <summary>
                Converts a string to a decimal
            </summary>
            <param name="source">String to convert</param>
            <returns>String as a decimal or an decimal type's default value</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.NumberExtensions.ParseDecimalOrDefault(System.String,System.Decimal)">
            <summary>
                Converts a string to a decimal
            </summary>
            <param name="source">String to convert</param>
            <param name="defaultValue">Default value to return if the string fails to convert</param>
            <returns>String as a decimal or the default value</returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.ReflectionExtensions">
            <summary>Reflection extensions</summary>
            Use Module to get all global and non-global methods defined in the module.
            Use MethodInfo to look at information such as parameters, name, return type, access modifiers and implementation details.
            Use EventInfo to find out the event-handler data type, the name, declaring type and custom attributes.
            Use ConstructorInfo to get data on the parameters, access modifiers, and implementation details of a constructor.
            Use Assembly to load modules listed in the assembly manifest.
            Use PropertyInfo to get the declaring type, reflected type, data type, name and writable status of a property or to get and set property values.
            Use CustomAttributeData to find out information on custom attributes or to review attributes without having to create more instances.
        </member>
        <member name="M:MyLibrary.Core.Extensions.ReflectionExtensions.ChangeType(System.Object,System.Type)">
            <summary>
            Changes the type of an object to another type ignoring culture
            </summary>
            <param name="source">Object to convert</param>
            <param name="newType">New type to convert to</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ReflectionExtensions.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Changes the type of an object to another type, with culture specificity
            </summary>
            <param name="source">Object to convert</param>
            <param name="newType">New type to convert to</param>
            <param name="culture">Culture</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>Get an attribute from a member</summary>
            <typeparam name="T">Attribute Type</typeparam>
            <param name="source">Member to retrieve attribute from</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.ReflectionExtensions.GetAttribute``1(System.Type)">
            <summary>Get an attribute from a type</summary>
            <typeparam name="T">Attribute Type</typeparam>
            <param name="source">Type to retrieve attribute from</param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.StreamExtensions">
            <summary>
            Extension methods for Streams
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>Copies bytes from one stream to another</summary>
            <param name="source">The input stream</param>
            <param name="destination">The output stream</param>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StreamExtensions.ReadAsBytes(System.IO.Stream)">
            <summary>Read a stream into a byte array</summary>
            <param name="source">Stream to read</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StreamExtensions.SaveAs(System.Byte[],System.String)">
            <summary>Save a byte array to a file</summary>
            <param name="source">Bytes to save</param>
            <param name="path">Full path to save file to</param>
        </member>
        <member name="T:MyLibrary.Core.Extensions.StringExtensions">
            <summary>
                Extension methods for <see cref="T:System.String" />
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.AddPrefix``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Appends a string to the beginning of another string
            </summary>
            <param name="source">Original string</param>
            <param name="prefix">String to append at the beginning</param>
            <returns>String</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.AddPrefix(System.String,System.String)">
            <summary>
                Appends a string to the beginning of another string
            </summary>
            <param name="source">Original string</param>
            <param name="prefix">String to append at the beginning</param>
            <returns>String</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.AddSuffix(System.String,System.String)">
            <summary>
                Appends a string to the end of another string
            </summary>
            <param name="source">Original string</param>
            <param name="suffix">String to append at the end</param>
            <returns>String</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.AddSuffix``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Appends a string to the end of another string
            </summary>
            <param name="source">Original string</param>
            <param name="suffix">String to append at the end</param>
            <returns>String</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.Encrypt(System.String,System.Net.Security.EncryptionPolicy)">
            <summary>
                Encrypts the string based on the provided <see cref="T:System.Net.Security.EncryptionPolicy" />
            </summary>
            <param name="source">String to encrypt</param>
            <param name="encryptionPolicy">
                <see cref="T:System.Net.Security.EncryptionPolicy"> to use to encrypt the string</see>
            </param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.GetFromBeginning(System.String,System.Int32)">
            <summary>
                Removes a number of characters from the end of the string
            </summary>
            <param name="source">String to convert</param>
            <param name="numberOfChars">Number of characters to remove</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.GetFromEnd(System.String,System.Int32)">
            <summary>
                Removes a number of characters from the beginning of the string
            </summary>
            <param name="source">String to convert</param>
            <param name="numberOfChars">Number of characters to remove</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.HasValue(System.String)">
            <summary>
                Returns whether the string is not empty
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.InitialLetterToLower(System.String)">
            <summary>
                Converts the first letter in a string to lower case
            </summary>
            <param name="source">String to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.InitialLetterToLower(System.String,System.Globalization.CultureInfo)">
            <summary>
                Returns the string with the first letter in lower case
            </summary>
            <param name="source">String to convert</param>
            <param name="cultureInfo">Culture of the string</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.InitialLetterToUpper(System.String)">
            <summary>
                Converts the first letter in a string to upper case using an invariant culture
            </summary>
            <param name="source">String to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.InitialLetterToUpper(System.String,System.Globalization.CultureInfo)">
            <summary>
                Converts the first letter in a string to upper case
            </summary>
            <param name="source">String to convert</param>
            <param name="cultureInfo">Culture of the string</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.IsBlank(System.String)">
            <summary>
                Returns whether the string is blank (white space characters ignored because then it wouldn't be 'blank')
            </summary>
            <example>
                " ".IsBlank() => false;
                "".IsBlank() => true;
            </example>
            <param name="source">String to check</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.IsLowercase(System.String)">
            <summary>
                Returns whether a string is completely in lowercase
            </summary>
            <param name="source">String to check</param>
            <returns>True/False</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
                Returns whether the string is completely empty, including white spaces
            </summary>
            <param name="source">String to check</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.IsUppercase(System.String)">
            <summary>
                Returns whether a string is completely in uppercase
            </summary>
            <param name="source">String to check</param>
            <returns>True/False</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.Matches(System.String,System.String)">
            <summary>
            </summary>
            <param name="source"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.NullIfEmpty(System.String)">
            <summary>
                Converts an empty string to null instead of string.Empty
            </summary>
            <param name="source">String to convert</param>
            <returns>A valid string or null</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.OnlyDigits(System.String)">
            <summary>
                Returns only the digits inside of a string
            </summary>
            <param name="source">String to compare against</param>
            <returns>All digits in the string</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ProperCapitalization(System.String)">
            <summary>
                Converts the first letter of the string into either upper or lower case depending on the word before it
            </summary>
            <param name="source">String to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.RemoveSubstring(System.String,System.String)">
            <summary>
                Removes a substring from a string
            </summary>
            <param name="source">String to convert</param>
            <param name="substring">Substring to remove</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.RemoveSubstring(System.String,System.Boolean,System.String[])">
            <summary>
                Returns a string minus any of the given substrings inside.
            </summary>
            <param name="source">Source string to extract</param>
            <param name="excludeWhitespace">T/F whether to exclude whitespace from results</param>
            <param name="paramStrings">Array of strings to remove from the source string</param>
            <returns>A string containing all characters except that of the substrings sent in.</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ReplaceUnicode(System.String)">
            <summary>
                Replaces all diacritics in the source string with their romanized counterpart
            </summary>
            <param name="source">Source string</param>
            <returns>Completely Romanized string</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
                Reverses the string
            </summary>
            <param name="source">String to reverse</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.SplitPascalCase(System.String)">
            <summary>
                Splits the string by pascal case
            </summary>
            <example>
                The following returns "This Is A Pascal Case String"
                <code>
            var str = "ThisIsAPascalCaseString";
            return str.SplitPascalCase();
            </code>
            </example>
            <param name="source">String to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.SplitUnderlines(System.String)">
            <summary>
                Splits the string by underlines
            </summary>
            <example>
                The following returns "This Is An Underlined String"
                <code>
            var str = "This_Is_An_Underlined_String";
            return str.SplitUnderlines();
            </code>
            </example>
            <param name="source">String to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ToPascalCase(System.String)">
            <summary>
                Converts a string into pascal case (UpperCamelCase) with an invariant culture
            </summary>
            <param name="source">String to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ToPascalCase(System.String,System.Globalization.CultureInfo)">
            <summary>
                Converts a string into pascal case (UpperCamelCase)
            </summary>
            <param name="source">String to convert</param>
            <param name="cultureInfo">Culture of the string</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ToPascalCase(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
                Converts a string into pascal case (UpperCamelCase) with the option to remove underscores
            </summary>
            <param name="source">String to convert</param>
            <param name="removeUnderscores">Option to remove underscores</param>
            <param name="cultureInfo">Culture of the string</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ToSafeString(System.String)">
            <summary>
                Converts a string to a null-safe (non-null) string.
            </summary>
            <param name="source">String to convert</param>
            <returns>Null-safe string</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ToStringOrDefault``1(System.Nullable{``0},System.String)">
            <summary>
                Returns a string, or a default value if the string is null
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="source">String to convert</param>
            <param name="defaultValue">String to display if the source string is null</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ToStringOrDefault``1(System.Nullable{``0},System.String,System.String)">
            <summary>
                Returns a formatted string, or a default value if the string is null
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="source">String to display</param>
            <param name="format">Format of the string</param>
            <param name="defaultValue">String to display if the source string is null</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.ToStringOrDefault``1(System.Nullable{``0},System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
                Returns a formatted string, or a default value if the string is null
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="source">String to display</param>
            <param name="format">Format of the string</param>
            <param name="culture">Culture of the string</param>
            <param name="defaultValue">String to display if the source string is null</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.TruncateFirstChar(System.String)">
            <summary>
                Removes the first character from the string
            </summary>
            <param name="source">String to convert</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.StringExtensions.TruncateLastChar(System.String)">
            <summary>
                Removes the last character from the string
            </summary>
            <param name="source">String to convert</param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Extensions.UrlExtensions">
            <summary>
            Extension Methods for URLs
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Extensions.UrlExtensions.IsNullOrEmpty(System.Uri)">
            <summary>
            Returns whether the url is null or empty
            </summary>
            <param name="url">Uri to check</param>
            <returns>True/False</returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.UrlExtensions.UrlDecode(System.String)">
            <summary>
            Returns a string decoded from a Url
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Extensions.UrlExtensions.UrlEncode(System.String)">
            <summary>
            Returns a string encoded as a Url
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Formatters.DateTimeFormatter">
            <summary>
            DateTime formatters
            </summary>
        </member>
        <member name="T:MyLibrary.Core.Formatters.StringFormatter">
            <summary>
            String formatters
            </summary>
        </member>
        <member name="T:MyLibrary.Core.Formatters.FilesizeFormatter">
            <summary>
            Utilities for file management
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Formatters.FilesizeFormatter.FormatFilesize(System.Double)">
            <summary>
            Returns the filesize in a human-readable string
            </summary>
            <param name="fileLength"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Helpers.AddressHelper">
            <summary>
                Methods to extend and format Addresses
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Helpers.AddressHelper.Format(MyLibrary.Models.Address)">
            <summary>
                Formats an address into a string
            </summary>
            <param name="source"><see cref="T:MyLibrary.Models.Address" /> to be formatted</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Helpers.AddressHelper.IsValidZip(System.String,MyLibrary.Models.Country)">
            <summary>
                Determines whether the postal/zip code is valid.
            </summary>
            <param name="source">Postal/Zip code</param>
            <param name="country">Country of origin</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Helpers.AddressHelper.GetStates(MyLibrary.Models.Country)">
            <summary>
                Returns a list of <see cref="T:MyLibrary.Models.State" /> for a given country.
            </summary>
            <param name="country">The <see cref="T:MyLibrary.Models.Country" /> to get the states from.</param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Helpers.AddressHelper.GetCountries(MyLibrary.Models.Region)">
            <summary>
                Returns a list of countries in a given region.
            </summary>
            <param name="region">The enum of the region represented as an integer</param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Helpers.Constants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="P:MyLibrary.Core.Helpers.Constants.Diacritics">
            <summary>
            Dictionary of all possible diacritics and their romanized counterparts
            </summary>
        </member>
        <member name="T:MyLibrary.Core.Helpers.DateHelper">
            <summary>
            Helper methods for DateTime objects
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Helpers.DateHelper.FirstMondayOfYear(System.Int32)">
            <summary>
                Returns a <see cref="T:System.DateTime" /> object for the first Monday of the year
            </summary>
            <example>DateTime mnd = DateExtensions.FirstMondayOfYear(2017);</example>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Helpers.EnumHelper`1">
            <summary>
            Helper methods for <see cref="T:System.Enum"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyLibrary.Core.Helpers.EnumHelper`1.SearchDescriptions(System.String)">
            <summary>
            Retrieves the description listed in an enum's attribute
            </summary>
            <example>EnumHelper&lt;SomeEnumName&gt;.GetDescription("</example>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Helpers.StringHelper">
            <summary>
            Helper methods for String types
            </summary>
        </member>
        <member name="T:MyLibrary.Core.Services.CookieService">
            <summary>
            Services to handle cookie manipulation
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Services.CookieService.Get(System.String)">
            <summary>
            Get a specific cookie
            </summary>
            <param name="cookie"></param>
            <returns></returns>
        </member>
        <member name="M:MyLibrary.Core.Services.CookieService.Set(System.String,System.String)">
            <summary>
            Set a specific cookie
            </summary>
            <param name="cookie"></param>
            <param name="value"></param>
        </member>
        <member name="M:MyLibrary.Core.Services.CookieService.Remove(System.String)">
            <summary>
            Delete a specific cookie
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="T:MyLibrary.Core.Services.RssFeedService">
            <summary>
                Helper method to get an RSS Feed and populate articles
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Services.RssFeedService.GetRssItems(MyLibrary.Interfaces.IRssFeed)">
            <summary>
                Method to get all Rss Articles from a feed
            </summary>
            <example>IEnumerable&lt;RssItem&gt; myArticles = RssFeedService.GetRssItems(myRssFeed)</example>
            <param name="rssFeed"></param>
            <returns></returns>
        </member>
        <member name="T:MyLibrary.Core.Utilities.ConfigurationUtility">
            <summary>
                Utilities for System Configuration
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Utilities.ConfigurationUtility.GetAppSetting``1(System.String,``0,System.Boolean)">
            <summary>
                Tries to read an appsetting strongly typed by using
                <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)" /> to convert the string value.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="key">The appSetting key</param>
            <param name="fallback">
                Fallback value to return if the value is not found, or can not be converted to the target type
                if <paramref name="throwIfInvalid" /> is false.
            </param>
            <param name="throwIfInvalid">
                If set true, the function will throw if conversion fails. It will *not* throw if the
                config value is null (not found).
            </param>
        </member>
        <member name="T:MyLibrary.Core.Utilities.ExcelUtilities`1">
            <summary>
                Utilities for CRUD operations of Excel files
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Utilities.ExcelUtilities`1.#ctor(System.Data.DataRowCollection)">
            <summary>
                Constructor for Excel Utilities
            </summary>
            <param name="rows"></param>
        </member>
        <member name="M:MyLibrary.Core.Utilities.ExcelUtilities`1.Read(System.IO.Stream,System.String)">
            <summary>
                Gets data from an Excel file
            </summary>
            <param name="stream"></param>
            <param name="fileName"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:MyLibrary.Core.Utilities.HttpContextUtility">
            <summary>
                Utilities for handling Http Context operations
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Utilities.HttpContextUtility.ClearRouteOutputCache(System.String,System.String,System.Web.HttpContextBase)">
            <summary>
                Removes the specified action url from the output cache.
            </summary>
            <param name="actionName">Action</param>
            <param name="controllerName">Controller</param>
            <param name="context">HttpContext</param>
        </member>
        <member name="M:MyLibrary.Core.Utilities.HttpContextUtility.GetClientIPAddress(System.Web.HttpContextBase)">
            <summary>Tries to find the client's real IP address</summary>
            <remarks>
                Checks HTTP_TRUE_CLIENT_IP (CDNs), HTTP_X_FORWARDED_FOR (behind proxies) and REMOTE_ADDR
            </remarks>
            <returns>A <see cref="T:System.Net.IPAddress" />, or null if no IP could be determined</returns>
        </member>
        <member name="T:MyLibrary.Core.Utilities.MathUtilities">
            <summary>
            Utilities for handling mathematical operations
            </summary>
        </member>
        <member name="M:MyLibrary.Core.Utilities.MathUtilities.Max``1(``0[])">
            <summary>
                Returns the maximum value in a sequence
            </summary>
            <typeparam name="T">Type of objects to compare</typeparam>
            <param name="values">Objects to compare</param>
            <returns>Object that is the maximum value in a sequence</returns>
        </member>
        <member name="M:MyLibrary.Core.Utilities.MathUtilities.Min``1(``0[])">
            <summary>
                Returns the minimum value in a sequence
            </summary>
            <typeparam name="T">Type of objects to compare</typeparam>
            <param name="values">Objects to compare</param>
            <returns></returns>
        </member>
    </members>
</doc>
